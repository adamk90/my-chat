{"version":3,"sources":["Proxy.ts","EventProducer.ts","TextInput.tsx","Login.tsx","ConversationCard.tsx","LeftPane.tsx","MessageCard.tsx","RightPane.tsx","Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","console","log","data","p","JSON","parse","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","email","password","name","stringify","displayName","staySignedIn","this","send","packet","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","TextInputAndButton","textInput","React","createRef","onClick","current","ref","buttonContent","Login","displayNameRef","register","onEmailChange","newEmail","toLowerCase","login","displayInput","src","width","alt","href","preventDefault","ConversationCard","lastMessage","length","selected","onSelect","Date","timeStamp","toLocaleDateString","content","m","forceUpdate","removeAllEventListener","LeftPane","user","tag","text","sendContactRequest","map","key","selectedConversation","sendPacket","firstMessage","c","MessageCard","own","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","loggedIn","loginCallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a3c716b9.chunk.js","sourcesContent":["import { IncomingPacket, OutgoingPacket } from \"./chat\";\nimport { InboxDto } from \"./chat\";\nimport EventProducer from \"./EventProducer\"\nimport ProxyEventMap from \"./ProxyEventMap\"\n\nclass Proxy extends EventProducer<ProxyEventMap>\n{\n    private ws: WebSocket;\n    inbox: InboxDto | null = null;\n\n    constructor()\n    {\n        super();\n        this.ws = new WebSocket(\"wss://raja.aut.bme.hu/chat/\");\n        this.ws.addEventListener(\"open\", () => {\n        });\n        this.ws.addEventListener(\"message\", e =>\n        {\n            console.log(e.data);\n            let p = JSON.parse(e.data) as IncomingPacket;\n            switch (p.type)\n            {\n                case \"error\":\n                    alert(p.message);\n                    break;\n                case \"login\":\n                    this.inbox = p.inbox;\n                    this.dispatch(\"login\");\n                    break;\n                case \"message\":\n                    let cid = p.channelId;\n                    this.inbox!.conversations.find(x => x.channelId === cid)?.lastMessages.push(p.message);\n                    this.dispatch(\"message\", cid, p.message);\n                    break;\n                case \"conversationAdded\":\n                    this.inbox!.conversations.push(p.conversation);\n                    this.dispatch(\"conversation\", p.conversation.channelId);\n                    break;\n            }\n        });\n    }\n\n    register(email: string, password: string, name: string) {\n        let message = JSON.stringify({ type: \"register\", email: email, password: password, displayName: name, staySignedIn: false });\n        this.ws.send(message);\n    }\n\n    login(email: string, password: string) {\n        let message = JSON.stringify({ type: \"login\", email: email, password: password, staySignedIn: false });\n        this.ws.send(message);\n    }\n\n    sendPacket(packet: OutgoingPacket)\n    {\n        this.ws.send(JSON.stringify(packet));\n    }\n}\n\nexport var proxy = new Proxy();","export default class EventProducer<M>\n{\n    private listeners: {type: keyof M, listener: any, obj?: Object}[] = [];\n\n    addEventListener<K extends keyof M>(type: K, listener: M[ K ], obj?: Object)\n    {\n        this.listeners.push({type, listener, obj});\n    }\n    removeEventListener<K extends keyof M>(type: K, listener: M[ K ])\n    {\n        this.listeners.splice(this.listeners.findIndex(x => x.type === type && x.listener === listener), 1);\n    }\n    removeAllEventListener(obj: Object)\n    {\n        if (!obj)\n            throw new Error(\"Must specify object\");\n        this.listeners = this.listeners.filter(x => x.obj !== obj);\n    }\n    protected dispatch(type: string, ...args)\n    {\n        for (let listener of this.listeners.filter(x => x.type === type))\n            listener.listener.call(listener.obj, ...args);\n    }\n}","import React, {Component} from 'react';\nimport './TextInput.css';\n\nexport interface TextInputOptions\n{\n    value?:string;\n    onChange?: (value: string) => void;\n    type?: \"text\" | \"password\" | \"email\";\n    placeholder?:string;\n    onEnter?: (e) => void;\n    autofocus?:boolean;\n}\n\nexport interface TextInputAndButtonOptions extends TextInputOptions\n{\n    buttonContent?:string;\n    onClick?: (text: string) => boolean | void;\n}\n\nexport class TextInput extends Component<TextInputOptions>\n{\n    state = {value: this.props.value, focus: false};\n    render() {\n        let attrs = {} as any;\n        if (this.props.autofocus) {\n            attrs.autoFocus = true;\n        }\n        if (this.props.onEnter) {\n            attrs.onKeyDown = e =>\n            {\n                if (e.keyCode === 13)\n                    this.props.onEnter!(e);\n            }\n        }\n        return (\n            <div className=\"text-input\">\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\n                       onChange={e=>{\n                           this.setState({value: e.target.value});\n                           this.props.onChange?.(e.target.value);\n                       }}\n                       onBlur={() => this.setState({focus: false})}\n                       onFocus={() => this.setState({focus: true})}\n                       {...attrs}\n                />\n                <div className=\"focus-indicator\"></div>\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\n                    {this.props.placeholder}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>\n{\n    textInput = React.createRef<TextInput>();\n\n    onClick() {\n        if (this.props.onClick?.(this.textInput.current?.state.value ?? \"\")) {\n            //this.textInput.current?.setState({value: \"\"});\n            if (this.textInput.current) {\n                this.textInput.current.state.value = \"\";\n            }\n        }\n    }\n\n    render() {\n        return <div className=\"text-input-and-button\">\n                    <TextInput {...this.props} ref={this.textInput} onEnter={ () => this.onClick() } />\n                    <button type=\"button\" onClick = { () => this.onClick() }>\n                        { this.props.buttonContent }\n                    </button>\n               </div>\n    }\n}","import React, { Component } from 'react';\nimport {proxy} from './Proxy';\nimport {TextInput} from './TextInput'\n\nconst NEPTUN: string = \"UAAA5I\";\nconst KERESZTNEV: string = \"Adam\";\n\nexport default class Login extends Component<{}, {email: string, password: string, displayName: string, register: boolean}>\n{\n    displayNameRef: any;\n    state = {email: \"\", password: \"\", displayName: \"\", register: false};\n    constructor(props)\n    {\n        super(props);\n        this.displayNameRef = React.createRef<TextInput>();\n    }\n\n    render()\n    {\n        let displayInput = (<TextInput type=\"text\" placeholder=\"Display Name\" value={this.state.displayName}\n                                 onChange={displayName => {this.setState({displayName: displayName});}}\n                                 onEnter={(e) => this.onClick(e)}\n                                 ref={this.displayNameRef}\n                            />\n        );\n        return (\n            <div className=\"login\">\n                <img src=\"logo512.png\" width=\"256\" alt=\"\"/>\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\n                       onChange={email => {\n                           this.onEmailChange(email);\n                           this.setState({email: email});\n                        }}\n                       onEnter={(e) => this.onClick(e)}\n                       autofocus = {true}\n                />\n                {this.state.register && displayInput}\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password}\n                    onChange={password => {\n                        this.setState({password: password});\n                    }}\n                    onEnter={(e) => this.onClick(e) }\n                />\n                <button type=\"button\" onClick={(e) => this.onClick(e)}>\n                    {this.state.register ? \"Register\" : \"Login\"}\n                </button>\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\n                <p>\n                    {this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\n                    <a href=\"/\" onClick={e => {e.preventDefault(); this.setState({register: !this.state.register});}}>\n                        {this.state.register ? \"Login\" : \"Register\"}\n                    </a>\n                </p>\n            </div>\n        );\n    }\n\n    onEmailChange = (newEmail: string) => {\n        if (newEmail.toLowerCase() === NEPTUN.toLowerCase()) {\n            this.setState({\n                displayName: KERESZTNEV\n             });\n            this.displayNameRef.current.state.value = KERESZTNEV;\n        }\n    }\n\n    onClick = (e) => {\n        if (this.state.register) {\n            proxy.register(this.state.email, this.state.password, this.state.displayName);\n        } else {\n            proxy.login(this.state.email, this.state.password);\n        }\n    }\n}","import React, { Component } from 'react';\nimport { ConversationDto } from './chat.d'\nimport { proxy } from './Proxy';\n\nexport class ConversationCard extends Component<{\n    conversation: ConversationDto,\n    selected: boolean,\n    onSelect: () => void\n}>\n{\n    render() {\n        let lastMessage = this.props.conversation.lastMessages.length > 0 ?\n            this.props.conversation.lastMessages[this.props.conversation.lastMessages.length - 1] : null;\n        return (\n            <div className={\"conversation-card\" + (this.props.selected ? \" selected\" : \"\")}\n                onClick={() => this.props.onSelect()}>\n                <div className=\"row\">\n                    <span className=\"channel-name\">{this.props.conversation.name}</span>\n                    <span className=\"time\">\n                        {lastMessage && new Date(lastMessage.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n                <span className=\"last-message\">{lastMessage?.content}</span>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n}","import React, { Component } from 'react';\nimport { TextInputAndButton } from './TextInput';\nimport { ConversationDto, InboxDto } from './chat.d'\nimport { ConversationCard } from './ConversationCard';\nimport { proxy } from './Proxy';\n\n\nexport class LeftPane extends Component<{\n    inbox: InboxDto, selectedConversation: ConversationDto | undefined,\n    onSelect: (c: ConversationDto) => void\n}>\n{\n    render() {\n        return (\n            <div className=\"left-pane\">\n                <p className=\"my-tag\">My tag: {this.props.inbox.user.tag}</p>\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\n                    buttonContent=\"Inv\"\n                    onClick={text => this.sendContactRequest(text)} />\n                <div className=\"conversations\">\n                    {this.props.inbox.conversations.map(x =>\n                        <ConversationCard\n                            key={x.channelId}\n                            conversation={x}\n                            selected={x === this.props.selectedConversation}\n                            onSelect={() => this.props.onSelect(x)} />)}\n                </div>\n            </div>\n        );\n    }\n\n    sendContactRequest(email: string) {\n        proxy.sendPacket({ type: \"contactRequest\", email, firstMessage: \"Hello\" });\n        return true;\n    }\n\n    componentDidMount() {\n        proxy.addEventListener(\"conversation\", c => this.forceUpdate(), this);\n    }\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n}","import React, { PureComponent } from 'react';\nimport { MessageDto } from './chat.d'\n\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>\n{\n    render() {\n        return (\n            <div className={\"message-card\" + (this.props.own ? \" own\" : \"\")}>\n                <div className=\"bubble\">\n                    <span className=\"text\">{this.props.message.content}</span>\n                    <span className=\"time\">\n                        {new Date(this.props.message.timeStamp).toLocaleDateString()}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { ConversationDto } from './chat.d'\nimport { TextInputAndButton } from './TextInput';\nimport { proxy } from './Proxy';\nimport { MessageCard } from './MessageCard'\n\n\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\n{\n    componentDidMount() {\n        proxy.addEventListener(\"message\", (cid, m) => {\n            if (cid === this.props.conversation?.channelId)\n                this.forceUpdate();\n        }, this);\n    }\n\n    componentWillUnmount() {\n        proxy.removeAllEventListener(this);\n    }\n\n    onSend(text: string) {\n        proxy.sendPacket({ type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"U: \" + text });\n        return true;\n    }\n\n    render() {\n        return (\n            <div className=\"right-pane column\">\n                {this.props.conversation &&\n                    <>\n                        <div className=\"conversation-header row\">\n                            <button type=\"button\" className=\"only-narrow\" onClick = {() => this.props.onBack() }>\n                                Back\n                            </button>\n                            <p>{this.props.conversation?.name}</p>\n                        </div>\n                        <div className=\"messages\">\n                            {this.props.conversation?.lastMessages.map(x =>\n                                <MessageCard key={x.id} message={x}\n                                    own={x.senderId === proxy.inbox?.user.id} />)}\n                        </div>\n                        <div className=\"send-message row\">\n                            <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\n                                buttonContent=\"Send\" onClick={x => this.onSend(x)} />\n                        </div>\n                    </>\n                }\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport { LeftPane } from './LeftPane';\nimport { RightPane } from './RightPane';\nimport { proxy } from './Proxy';\n\nimport { ConversationDto } from './chat.d'\n\nexport class Main extends Component {\n    state = { selectedConversation: undefined as (ConversationDto | undefined) };\n    render() {\n        let className = \"main row \" + (this.state.selectedConversation ? \"right\" : \"left\");\n        return (\n            <div className={className}>\n                <LeftPane\n                    inbox={proxy.inbox!}\n                    selectedConversation={this.state.selectedConversation}\n                    onSelect={c => this.setState({ selectedConversation: c })} />\n                <RightPane conversation={this.state.selectedConversation} \n                           onBack = {() => this.setState({selectedConversation: undefined})}\n                />\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\nimport Login from './Login';\nimport {Main} from './Main';\nimport {proxy} from './Proxy';\n\nclass App extends Component<{}, {loggedIn: boolean}>\n{\n  state = {loggedIn: false};\n  constructor(props) {\n    super(props);\n    proxy.addEventListener(\"login\", this.loginCallback);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.loggedIn ? <Main /> : <Login />}\n      </div>\n    );\n  }\n\n  loginCallback = () => {\n    this.setState({loggedIn: true});\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}